{"version":3,"sources":["store/types.ts","store/reducers/currencyReducer.ts","store/reducers/transactionsReducer.ts","store/reducers/index.ts","store/index.ts","styles/colors.ts","components/layout/Header.tsx","store/actions/currency.ts","components/styled/Input.ts","components/styled/Button.ts","components/styled/Heading.ts","utils/numbers.ts","components/Conversion.tsx","components/transactions/TransactionForm.tsx","store/actions/transaction.ts","components/transactions/TransactionItem.tsx","components/transactions/TransactionsList.tsx","components/transactions/TransactionsSum.tsx","store/selectors/transactions.ts","components/transactions/BiggestTransaction.tsx","styles/GlobalStyles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CurrencyActionTypes","TransactionsAcionTypes","initState","conversionRate","currencyReducer","state","action","type","addConversionRate","payload","items","transactionsReducer","addTransaction","removeTransaction","filter","item","id","rootReducer","combineReducers","currency","transactions","makeStore","Colors","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","StyledHeader","styled","header","primary","Logo","h1","Header","Input","input","gray","Button","button","Heading","h2","round2Decimals","number","Math","round","Wrapper","section","light","StyledSpan","span","Conversion","dispatch","useDispatch","useSelector","useState","toString","newConversion","setNewConversion","isEditing","setIsEditing","inputRef","useRef","useEffect","current","focus","ref","onKeyPress","e","key","value","currentTarget","match","Number","onBlur","target","onChange","onClick","Form","form","FormElement","div","Label","label","TransactionForm","amount","setAmount","name","setName","onSubmit","preventDefault","alert","transaction","eurAmount","uuid","htmlFor","placeholder","disabled","Item","article","ItemName","h3","ItemAmount","p","DeleteBtn","TransactionItem","handleRemove","List","ul","TransactionsList","length","map","Text","TransactionsSum","sum","reduce","acc","Section","BiggestTransaction","biggestTransaction","sort","a","b","GlobalStyle","createGlobalStyle","Flex","App","store","className","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.401babee.chunk.js","sourcesContent":["export enum CurrencyActionTypes {\r\n  addConversionRate = 'addConversionRate',\r\n}\r\n\r\nexport enum TransactionsAcionTypes {\r\n  addTransaction = 'addTransaction',\r\n  removeTransaction = 'removeTransaction',\r\n}\r\n","import { CurrencyActionTypes } from '../types';\r\n\r\ninterface State {\r\n  conversionRate: number;\r\n}\r\n\r\ntype AddConversionRateAction = {\r\n  type: CurrencyActionTypes.addConversionRate;\r\n  payload: number;\r\n};\r\n\r\ntype Action = AddConversionRateAction;\r\n\r\nconst initState: State = {\r\n  conversionRate: 1,\r\n};\r\n\r\nfunction currencyReducer(state = initState, action: Action): State {\r\n  switch (action.type) {\r\n    case CurrencyActionTypes.addConversionRate:\r\n      return {\r\n        ...state,\r\n        conversionRate: action.payload,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n\r\nexport default currencyReducer;\r\n","import { TransactionsAcionTypes } from '../types';\r\n\r\nexport interface Transaction {\r\n  id: string;\r\n  name: string;\r\n  eurAmount: number;\r\n}\r\n\r\ninterface State {\r\n  items: Transaction[];\r\n}\r\n\r\nexport type AddTransaction = {\r\n  type: TransactionsAcionTypes.addTransaction;\r\n  payload: Transaction;\r\n};\r\n\r\nexport type RemoveTransaction = {\r\n  type: TransactionsAcionTypes.removeTransaction;\r\n  payload: string;\r\n};\r\n\r\ntype Action = AddTransaction | RemoveTransaction;\r\n\r\nconst initState: State = {\r\n  items: [],\r\n};\r\n\r\nfunction transactionsReducer(state = initState, action: Action): State {\r\n  switch (action.type) {\r\n    case TransactionsAcionTypes.addTransaction:\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.payload],\r\n      };\r\n\r\n    case TransactionsAcionTypes.removeTransaction:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item.id !== action.payload),\r\n      };\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n\r\nexport default transactionsReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport currencyReducer from './currencyReducer';\r\nimport transactionsReducer from './transactionsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  currency: currencyReducer,\r\n  transactions: transactionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nfunction makeStore() {\r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n  const store = createStore(rootReducer, composeEnhancers());\r\n\r\n  return store;\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default makeStore;\r\n","export enum Colors {\r\n  primary = '#3F7CAC',\r\n  secondary = '#95AFBA',\r\n  border = '#D5E1A3',\r\n  light = '#f2f2f2',\r\n  gray = '#aaa',\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Colors } from '../../styles/colors';\r\n\r\nfunction Header() {\r\n  return (\r\n    <StyledHeader>\r\n      <Logo>Currency</Logo>\r\n    </StyledHeader>\r\n  );\r\n}\r\n\r\nconst StyledHeader = styled.header`\r\n  background-color: ${Colors.primary};\r\n  padding: 40px 40px;\r\n`;\r\n\r\nconst Logo = styled.h1`\r\n  color: #fff;\r\n  margin: 0;\r\n  font-weight: 400;\r\n`;\r\n\r\nexport default Header;\r\n","import { CurrencyActionTypes } from '../types';\r\n\r\nexport function addConversionRate(payload: number) {\r\n  return {\r\n    type: CurrencyActionTypes.addConversionRate,\r\n    payload,\r\n  };\r\n}\r\n","import styled from 'styled-components';\r\n\r\nimport { Colors } from '../../styles/colors';\r\n\r\nexport const Input = styled.input`\r\n  border: 2px solid ${Colors.gray};\r\n  padding: 5px 15px;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\nimport { Colors } from '../../styles/colors';\r\n\r\nconst Button = styled.button`\r\n  border: 2px solid ${Colors.primary};\r\n  padding: 10px 15px;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  transition-duration: 0.4s;\r\n  background-color: transparent;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    border: 2px solid transparent;\r\n    background-color: ${Colors.primary};\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\nimport { Colors } from '../../styles/colors';\r\n\r\nconst Heading = styled.h2`\r\n  position: relative;\r\n  margin-bottom: 40px;\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: -10px;\r\n    width: 70px;\r\n    height: 4px;\r\n    background-color: ${Colors.primary};\r\n  }\r\n`;\r\n\r\nexport default Heading;\r\n","export function round2Decimals(number: number) {\r\n  return Math.round(number * 100) / 100;\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { RootState } from '../store';\r\nimport { addConversionRate } from '../store/actions/currency';\r\nimport { Input, Heading } from './styled';\r\nimport { Colors } from '../styles/colors';\r\nimport { round2Decimals } from '../utils/numbers';\r\n\r\nfunction Conversion() {\r\n  const dispatch = useDispatch();\r\n  const { conversionRate } = useSelector((state: RootState) => state.currency);\r\n  const [newConversion, setNewConversion] = useState(conversionRate.toString());\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  function handleConversionClick() {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const { value } = e.target;\r\n\r\n    if (!value || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\r\n      setNewConversion(value);\r\n    }\r\n  }\r\n\r\n  function handleInputBlur(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const { value } = e.target;\r\n\r\n    if (!value || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\r\n      dispatch(addConversionRate(Number(value)));\r\n      setIsEditing(false);\r\n    }\r\n  }\r\n\r\n  function handleKeyPress(e: React.KeyboardEvent<HTMLInputElement>) {\r\n    if (e.key === 'Enter') {\r\n      const { value } = e.currentTarget;\r\n\r\n      if (!value || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\r\n        dispatch(addConversionRate(Number(value)));\r\n        setIsEditing(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading>Conversion rate</Heading>\r\n      1€ is{' '}\r\n      {!isEditing ? (\r\n        <StyledSpan onClick={handleConversionClick}>{round2Decimals(conversionRate)} PLN</StyledSpan>\r\n      ) : (\r\n        <Input\r\n          ref={inputRef}\r\n          onKeyPress={handleKeyPress}\r\n          onBlur={handleInputBlur}\r\n          onChange={handleChange}\r\n          value={newConversion}\r\n          type=\"text\"\r\n        />\r\n      )}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.section`\r\n  padding: 60px 200px;\r\n  background-color: ${Colors.light};\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  font-size: 32px;\r\n`;\r\n\r\nexport default Conversion;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { v1 as uuid } from 'uuid';\r\nimport styled from 'styled-components';\r\n\r\nimport { RootState } from '../../store/reducers';\r\nimport { addTransaction } from '../../store/actions/transaction';\r\nimport { Input, Button } from '../styled';\r\n\r\nfunction TransactionForm() {\r\n  const dispatch = useDispatch();\r\n  const { conversionRate } = useSelector((state: RootState) => state.currency);\r\n  const [amount, setAmount] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  function resetState() {\r\n    setAmount('');\r\n    setName('');\r\n  }\r\n\r\n  function handleAmountChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const { value } = e.target;\r\n\r\n    if (!value || value.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\r\n      setAmount(value);\r\n    }\r\n  }\r\n\r\n  function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const { value } = e.target;\r\n\r\n    setName(value);\r\n  }\r\n\r\n  function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n\r\n    if (!name || !amount) {\r\n      return alert('Please provide all neccescary data!');\r\n    }\r\n\r\n    const transaction = {\r\n      name,\r\n      eurAmount: Number(amount),\r\n      id: uuid(),\r\n    };\r\n\r\n    dispatch(addTransaction(transaction));\r\n    resetState();\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormElement>\r\n        <Label htmlFor=\"name\">Transaction name</Label>\r\n        <Input id=\"name\" onChange={handleNameChange} value={name} type=\"text\" placeholder=\"Transaction name\" />\r\n      </FormElement>\r\n      <FormElement>\r\n        <Label htmlFor=\"eur\">Amount in €</Label>\r\n        <Input id=\"eur\" onChange={handleAmountChange} value={amount} type=\"text\" placeholder=\"Amount in EUR\" />\r\n      </FormElement>\r\n      <FormElement>\r\n        <Label htmlFor=\"pln\">Amount in PLN</Label>\r\n        <Input id=\"pln\" disabled type=\"text\" value={(Number(amount) * conversionRate).toString()} placeholder=\"0\" />\r\n      </FormElement>\r\n      <FormElement>\r\n        <Button type=\"submit\">Add transaction</Button>\r\n      </FormElement>\r\n    </Form>\r\n  );\r\n}\r\n\r\nconst Form = styled.form`\r\n  padding: 60px 0;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst FormElement = styled.div`\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: block;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  margin-bottom: 6px;\r\n`;\r\n\r\nexport default TransactionForm;\r\n","import { TransactionsAcionTypes } from '../types';\r\n\r\nimport { Transaction } from '../reducers/transactionsReducer';\r\n\r\nexport function addTransaction(payload: Transaction) {\r\n  return {\r\n    type: TransactionsAcionTypes.addTransaction,\r\n    payload,\r\n  };\r\n}\r\n\r\nexport function removeTransaction(payload: string) {\r\n  return {\r\n    type: TransactionsAcionTypes.removeTransaction,\r\n    payload,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Transaction } from '../../store/reducers/transactionsReducer';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../store/reducers';\r\nimport { Colors } from '../../styles/colors';\r\nimport { round2Decimals } from '../../utils/numbers';\r\nimport { removeTransaction } from '../../store/actions/transaction';\r\n\r\ninterface Props {\r\n  item: Transaction;\r\n}\r\n\r\nfunction TransactionItem({ item }: Props) {\r\n  const dispatch = useDispatch();\r\n  const { conversionRate } = useSelector((state: RootState) => state.currency);\r\n\r\n  function handleRemove(id: string) {\r\n    dispatch(removeTransaction(id));\r\n  }\r\n\r\n  return (\r\n    <Item>\r\n      <ItemName>{item.name}</ItemName>\r\n      <ItemAmount>\r\n        {round2Decimals(item.eurAmount)} € - {round2Decimals(item.eurAmount * conversionRate)}PLN\r\n      </ItemAmount>\r\n      <DeleteBtn onClick={() => handleRemove(item.id)}>X</DeleteBtn>\r\n    </Item>\r\n  );\r\n}\r\n\r\nconst Item = styled.article`\r\n  box-shadow: 4px 6px 28px rgba(0, 0, 0, 0.2);\r\n  padding: 20px 40px;\r\n  margin-bottom: 24px;\r\n  position: relative;\r\n`;\r\n\r\nconst ItemName = styled.h3`\r\n  color: ${Colors.primary};\r\n`;\r\n\r\nconst ItemAmount = styled.p`\r\n  font-weight: 500;\r\n`;\r\n\r\nconst DeleteBtn = styled.button`\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 20px;\r\n  color: #f00;\r\n  border: unset;\r\n  background: unset;\r\n  cursor: pointer;\r\n  font-size: 32px;\r\n`;\r\n\r\nexport default TransactionItem;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { RootState } from '../../store/reducers';\r\nimport { Colors } from '../../styles/colors';\r\nimport Heading from '../styled/Heading';\r\nimport TransactionItem from './TransactionItem';\r\n\r\nfunction TransactionsList() {\r\n  const {\r\n    transactions: { items },\r\n  } = useSelector((state: RootState) => state);\r\n\r\n  if (!items.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading>All transactions</Heading>\r\n      <List>\r\n        {items.map((item) => (\r\n          <TransactionItem key={item.id} item={item} />\r\n        ))}\r\n      </List>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 30px 60px 30px 200px;\r\n  background-color: ${Colors.light};\r\n  width: 50%;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  list-style: none;\r\n  padding-left: 0;\r\n`;\r\n\r\nexport default TransactionsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { RootState } from '../../store/reducers';\r\nimport { getSumOfAllTransactions } from '../../store/selectors/transactions';\r\nimport Heading from '../styled/Heading';\r\nimport { round2Decimals } from '../../utils/numbers';\r\n\r\nfunction TransactionsSum() {\r\n  const {\r\n    transactions: { items },\r\n    currency: { conversionRate },\r\n  } = useSelector((state: RootState) => state);\r\n  const sum = getSumOfAllTransactions(items);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading>Sum of all transactions</Heading>\r\n      <Text>\r\n        {round2Decimals(sum)}€ - {round2Decimals(sum * conversionRate)}PLN\r\n      </Text>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: fixed;\r\n  top: 40px;\r\n  right: 40px;\r\n  background-color: #fff;\r\n  padding: 20px 40px;\r\n  opacity: 0.75;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-weight: 500;\r\n`;\r\n\r\nexport default TransactionsSum;\r\n","import { Transaction } from '../reducers/transactionsReducer';\r\n\r\nexport function getSumOfAllTransactions(transactions: Transaction[]) {\r\n  return transactions.reduce((acc, item) => {\r\n    acc += item.eurAmount;\r\n    return acc;\r\n  }, 0);\r\n}\r\n\r\nexport function getBiggestTransaction(transactions: Transaction[]) {\r\n  if (!transactions.length) {\r\n    return null;\r\n  }\r\n\r\n  return transactions.sort((a, b) => b.eurAmount - a.eurAmount)[0];\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { RootState } from '../../store/reducers';\r\nimport { getBiggestTransaction } from '../../store/selectors/transactions';\r\nimport { Colors } from '../../styles/colors';\r\nimport { Heading } from '../styled';\r\nimport { TransactionItem } from '.';\r\n\r\nfunction BiggestTransaction() {\r\n  const { items } = useSelector((state: RootState) => state.transactions);\r\n  const biggestTransaction = getBiggestTransaction(items);\r\n\r\n  if (!biggestTransaction) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Section>\r\n      <Heading>Biggest Transaction</Heading>\r\n      <TransactionItem item={biggestTransaction} />\r\n    </Section>\r\n  );\r\n}\r\n\r\nconst Section = styled.section`\r\n  padding-top: 30px;\r\n  padding-right: 200px;\r\n  width: 50%;\r\n  background-color: ${Colors.light};\r\n`;\r\n\r\nexport default BiggestTransaction;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *, *::before, *::after {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    font-family: \"Roboto\", sans-serif;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport styled from 'styled-components';\n\nimport makeStore from './store';\nimport { Header } from './components/layout';\nimport Conversion from './components/Conversion';\nimport { TransactionForm, TransactionsList, TransactionsSum, BiggestTransaction } from './components/transactions';\nimport GlobalStyle from './styles/GlobalStyles';\n\nfunction App() {\n  return (\n    <Provider store={makeStore()}>\n      <div className=\"App\">\n        <GlobalStyle />\n        <Header />\n        <Conversion />\n        <TransactionForm />\n        <Flex>\n          <TransactionsList />\n          <BiggestTransaction />\n        </Flex>\n        <TransactionsSum />\n      </div>\n    </Provider>\n  );\n}\n\nconst Flex = styled.div`\n  display: flex;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}